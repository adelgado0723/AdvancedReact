const { forwardTo } = require("prisma-binding");
const { hasPermission } = require("../utils");

const Query = {
  // async items(parent, args, ctx, info) {
  // Prisma knows to wait for a promise to resolve
  // if a promise is returned, but we are returning
  // the actual data anyways to be able to debug in
  // here.
  //   const items = await ctx.db.query.items();
  //   return items;
  // }

  // To forward resolvers to those generated by prisma,
  // we can use:
  items: forwardTo("db"),
  item: forwardTo("db"),
  itemsConnection: forwardTo("db"),
  me(parent, args, ctx, info) {
    // Check if there is a userId
    if (!ctx.request.userId) {
      return null;
    }
    return ctx.db.query.user(
      {
        where: { id: ctx.request.userId }
      },
      info
    );
  },
  async users(parent, args, ctx, info) {
    // 1. Check if the user is logged in
    if (!ctx.request.userId) {
      throw new Error("You must be logged in!");
    }
    // 2. Check if the user has teh permissions to query
    // all user permissions
    hasPermission(ctx.request.user, ["ADMIN", "PERMISSIONUPDATE"]);

    // 3. If they do, query all user permissions
    return ctx.db.query.users({}, info);
  }

  // Later, you can go in and write custom resolvers
  // that do what you need them to do.
};

module.exports = Query;
